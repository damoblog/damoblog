{"meta":{"title":"Damo Blog","subtitle":"","description":"业精于勤荒于嬉，行成于思毁于随。","author":"Damo","url":"http://www.lidamo.cn"},"pages":[{"title":"分类","date":"2021-05-10T09:50:03.000Z","updated":"2021-05-10T11:05:05.638Z","comments":true,"path":"categories/index.html","permalink":"http://www.lidamo.cn/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"标签","date":"2021-05-10T11:04:30.000Z","updated":"2021-05-10T11:04:55.147Z","comments":true,"path":"tags/index.html","permalink":"http://www.lidamo.cn/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"Unity资源管理（一）Asset","slug":"Unity资源管理（一）Asset","date":"2021-05-12T12:20:13.000Z","updated":"2021-05-13T08:11:17.361Z","comments":true,"path":"2021/05/12/Unity资源管理（一）Asset/","link":"","permalink":"http://www.lidamo.cn/2021/05/12/Unity%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89Asset/","excerpt":"","text":"Asset 和 ObjectAsset（资源文件）关于Asset，网上已经有很多解释了，可以去看https://zhuanlan.zhihu.com/p/96709802 简单来说，Asset是位于Assets目录下，可以在Unity的Projects窗口里看到的单个文件。这些就是平常项目中用到的资源文件，例如纹理，音效文件，预制体等等。 Object （对象）Object是指从UnityEngine.Object继承的对象，是一个可以序列化的数据，是用来描述一个特定的资源的实例。例如Mesh, Sprite, AudioClip or AnimationClip等等。 Asset和Object刚学习时，会把Asset和Object搞混，这里可以去看这篇文章https://mp.weixin.qq.com/s/0XFQt8LmqoTxxst_kKDMjw?简单来说，对于Asset，无论是纹理、音乐还是预制体，在进入Unity以后，都需要转变成Object，即纹理转变为Texture2D或Sprite，音效文件转变为AudioClip，预制体变成了GameObject等等，这个由Asset(资源文件)转变为Object(对象)，从磁盘进入内存的过程，就是实例化。 Asset 加载和实例化Asset加载和实例化原理一个Prefab从assetBundle里Load出来 里面可能包括：Gameobject transform mesh texture material shader script和各种其他AssetsInstaniate一个Prefab，是一个对Assets进行Clone(复制)+引用结合的过程，GameObject transform 是Clone是新生成的。其他mesh / texture / material / shader 等，这其中些是纯引用的关系的，包括：Texture和TerrainData，还有引用和复制同时存在的，包括：Mesh/material /PhysicMaterial。引用的Asset对象不会被复制，只是一个简单的指针指向已经Load的Asset对象提一下的是一个特殊的东西：Script Asset，看起来很奇怪，Unity里每个Script都是一个封闭的Class定义而已, 并没有写调用代码，光Class的定义脚本是不会工作的。其实Unity引擎就是那个调用代码，Clone一个script asset等于new一个class实例，实例才会完成工作。把他挂到Unity主线程的调用链里去，Class实例里的OnUpdate OnStart等才会被执行。多个物体挂同一个脚本，其实就是在多个物体上挂了那个脚本类的多个实例而已，这样就好理解了。在new class这个过程中，数据区是复制的，代码区是共享的，算是一种特殊的复制+引用关系。你可以再Instaniate一个同样的Prefab, 还是这套mesh/texture/material/shader等等，这时候会有新的GameObject等，但是不会创建新的引用对象比如texture.可以参照下图理解 Asset加载方式通俗意义上存在三种加载方式静态引用：建一个public的变量，在Inspector里把prefab拉上去，用的时候instantiateResource.Load: Load以后instantiateAssetBundle.Load: Load以后instantiate 这里进行了一波测试 12345678910111213141516171819202122232425262728IEnumerator OnTestClick()&#123; Resources.UnloadUnusedAssets();//清干净以免影响测试效果 float wait = 5f;//每步都等待5s以便于分析结果 yield return new WaitForSeconds(wait); GameObject go = Resources.Load(&quot;prefab1&quot;) as GameObject;//加载Prefab yield return new WaitForSeconds(wait); GameObject obj = Instantiate(go) as GameObject;//生成实例 yield return new WaitForSeconds(wait); Destroy(obj);//销毁实例 yield return new WaitForSeconds(wait); Resources.UnloadUnusedAssets();//卸载无用资源 yield return new WaitForSeconds(wait); go = null;//将prefab引用置为空以后卸载无用资源 Resources.UnloadUnusedAssets();&#125; 放到真机环境下测试以后 可以看到Load时候引用类型的Assert（即pic1）已经被加载到内存中，实例化时候只是Clone和对已经加载到内存中的Assert引用 什么时候才是UnusedAssets?从上面例子中可以看到Destory一个Prefab实例以后，这时候Prefab已经没有被实际的物体引用了，但如果这时：Resources.UnloadUnusedAssets();内存并没有被释放，原因：Prefab还被这个变量go所引用这时候：go = null;Resources.UnloadUnusedAssets();这样才能真正释放Assets对象所以：UnusedAssets不但要没有被实际物体引用，也要没有被生命周期内的变量所引用，才可以理解为 Unused(引用计数为0)所以：如果用个全局变量保存Load的Assets，又没有显式的设为null，那在这个变量失效前是无论如何UnloadUnusedAssets也释放不了那些Assets的可以再写下如下代码测试 1234567891011121314151617181920212223242526272829303132333435363738IEnumerator OnTestClick()&#123; Resources.UnloadUnusedAssets();//清干净以免影响测试效果 float wait = 5f;//每步都等待5s以便于分析结果 yield return new WaitForSeconds(wait); Texture tt = Resources.Load(&quot;pic1&quot;) as Texture;//加载贴图 yield return new WaitForSeconds(wait); GameObject go = Resources.Load(&quot;prefab1&quot;) as GameObject;//加载Prefab yield return new WaitForSeconds(wait); GameObject obj = Instantiate(go) as GameObject;//生成实例 yield return new WaitForSeconds(wait); Destroy(obj);//销毁实例 yield return new WaitForSeconds(wait); Resources.UnloadUnusedAssets();//卸载无用资源 yield return new WaitForSeconds(wait); go = null;//将prefab引用置为空以后卸载无用资源 Resources.UnloadUnusedAssets(); yield return new WaitForSeconds(wait); tt = null;//将texture引用置为空以后卸载无用资源 Resources.UnloadUnusedAssets();&#125; 这里可以确认prefab中加载的Assert pic1直接加载的pic1占有的是同一块内存，并且仅当go和tt都显示的置为null以后，才可以被UnloadUnusedAssets举个例子帮助理解你从Resources里Load了一个prefab并克隆之：obj = Instaniate(Resources.Load(“prefab1”));这个prefab比如是个npc然后你不需要他的时候你用了：Destroy(obj);你以为就释放干净了其实这时候只是释放了Clone对象，通过Load加载的所有引用、非引用Assets对象全都静静的躺在内存里。这种情况应该在Destroy以后再Resources.UnloadUnusedAssets()才能把Assets清除，当然如果你是go = Resources.Load(“prefab1”), obj = Instaniate(go);必须先go = null以后再Resources.UnloadUnusedAssets()才能把Assets清除，当然如果这个NPC也是要频繁创建，销毁的 那就应该让那些Assets呆在内存里以加速游戏体验。 总结Resources.Load 会把需要的所有Assets加载到内存中，当Instaniate时候会Clone和对已经加载到内存中的Assert引用，这些Assets只有在没有被实际物体引用，也没有被生命周期内的变量所引用，才可以理解为Unused，才能被Resources.UnloadUnusedAssets()同理，静态引用的时候由于始终有一个生命周期的对象引用pic1，只要中途没有把这个变量显示的置为null，pic1会自始至终躺在内存中至于AssetBundle.Load，可以把Resources.Load看作是从一个缺省打进程序包里的AssetBundle里加载资源，AssetBundle.load也是在load时候把Perfab的全部Assets加载到内存中","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://www.lidamo.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"Unity","slug":"技术/Unity","permalink":"http://www.lidamo.cn/categories/%E6%8A%80%E6%9C%AF/Unity/"}],"tags":[{"name":"资源管理","slug":"资源管理","permalink":"http://www.lidamo.cn/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"}]},{"title":"Lua和PureMVC","slug":"Lua和PureMVC","date":"2021-05-10T11:34:48.000Z","updated":"2021-05-13T03:39:32.111Z","comments":true,"path":"2021/05/10/Lua和PureMVC/","link":"","permalink":"http://www.lidamo.cn/2021/05/10/Lua%E5%92%8CPureMVC/","excerpt":"","text":"参考 https://blog.csdn.net/wangjiangrong/article/details/107686954 https://www.cnblogs.com/skynet/archive/2013/03/14/2958644.html https://blog.csdn.net/qq_29579137/article/details/73692842 挪用了其他文章中的一些流程图 前言最近负责项目UI框架部分的搭建，查阅了一些资料以后，借鉴了其他项目的一些想法，在这边整理一下，项目UI部分是用Lua写的，贴的相关代码也是Lua代码，由于是边学习边写的，命名规则是按项目标准命名的（成员变量前加m等） MVC和PureMVC目标：将数据（Model），视图组件（View）和控制逻辑（Control）进行分离。让程序便于修改，更具有扩展性，灵活性，可重用性。高内聚，低耦合，一直是追求的目标。传统经典的MVC模型虽然将数据，视图组件和控制逻辑进行了分离，但耦合性还是比较高。 PureMVC在MVC基础上做了许多的改进，通过结合多个设计模式的应用，让耦合性变得更低，也变得更加的易用，在扩展性，灵活性，重用性方面也做得更好 设计模式单例模式 （Singleton） 在PureMVC中，Model,View,Controller是三个单例模式类，三者合称为核心层，实际上是Manager管理类，分别定义了字典用于保存引用 外观模式（Facade） 在开发的过程中，需要在Contoller中，获取View以及Model的对象，修改Mode，更新View，或是在View，需要获取Model，进行一些初始化或是修改的操作，在业务逻辑很多的情况下，Model, View, Controller之间的频繁的调用就会非常多，耦合性会变高，在PureMVC中，为Model、View、Controller类提供了外观类Façade，主要负责访问和通知 Model、View 和 Controller，即管理这三者。Façade统一对外提供这3者的接口，使用过程成只需要跟Façade打交道就行 观察者模式（Observer）为了彻底解耦，避免直接的函数调用，PureMVC使用观察者模式（又称发布/订阅模式）的形式传递消息。在PureMVC中Mediator、Proxy、Command之间的通信，以通知形式实现松散耦合。Mediator、Proxy、Command都是通知者（发布者） 可以调用sendNotification发送消息；Mediator、Command同时也是观察者（订阅者）可以接收来自其它对象的通知。 这里先不用关心Mediator、Proxy、Command是什么，需要注意的是Mediator和Command既是通知者也是观察者，Proxy只是通知者Proxy=&gt;Model ，Mediator=&gt;View ， Command=&gt;Controller 所有的通知者（发布者）都继承自Notifier类，故拥有发布通知的功能，而Notifier是使用Façade发布通知的由外观模式可知façade保存了View的引用，View在观察者模式中充当着管理者的角色，保存着所有消息/主题、观察者的映射。当Mediator/Command/Proxy发布通知时，façade调用View的notifyObservers()方法，遍历保存的映射关系，从而通知所有满足条件的观察者 123456function Notifier:SendNotification(notificationName, body, type) local facade = self:GetFacade() if facade ~= nil then facade:SendNotification(notificationName, body, type) endend 123function Facade:SendNotification(notificationName, body, type) self:NotifyObservers(Notification.New(notificationName, body, type))end 12345function Facade:NotifyObservers(notification) if self.mView ~= nil then self.mView:NotifyObservers(notification) endend Command 中调用 Controller的 RegisterCommand 注册通知通过复写Command的Execute方法实现回调 123456function Controller:RegisterCommand(notificationName, commandClassRef) if(self.mCommandMap[notificationName] == nil) then self.mView:RegisterObserver(notificationName, Observer.New(self.ExecuteCommand, self)); end self.mCommandMap[notificationName] = commandClassRefend 123456789function Controller:ExecuteCommand(note) local commandClassRef = self.mCommandMap[note:GetName()] if(commandClassRef == nil) then return end local commandInstance = commandClassRef.New() commandInstance:InitializeNotifier(self.mMultitonKey) commandInstance:Execute(note)end Mediator 中调用 View 的 RegisterMediator通过复写Mediator的ListNotificationInterests方法实现回调 123456789101112131415function View:RegisterMediator(mediator) if self.mMediatorMap[mediator:GetMediatorName()] ~= nil then return end mediator:InitializeNotifier(self.mMultitonKey) self.mMediatorMap[mediator:GetMediatorName()] = mediator local interests = mediator:ListNotificationInterests() if #interests &gt; 0 then local observer = Observer.New(mediator.handleNotification, mediator) for _, i in pairs(interests) do self:RegisterObserver(i, observer) end end mediator:OnRegister()end 中介者模式（Mediator）在PureMVC中，Mediator帮助我们创建或重用已有UI组件，而UI不用知道PureMVC框架相关的东西，UI仅用于显示数据、接收用户输入。Mediator是UI组件与框架的中介，它负责将来自PureMVC框架的消息转接到UI，并将UI的消息转发广播到PureMVC框架。这样通过Mediator解耦了UI与PureMVC框架元素（Proxy、Mediator、Command），而不用互相引用。 一个Mediator只与一个UI绑定（1对1），Mediator构造函数参数传递与之绑定的UI。通过façade的registerMediator方法注册Mediator，以接收PureMVC框架的通知 Mediator接收PureMVC传来的Notification，调用UI函数接收UI派发的事件，转发Notification传回PureMVC框架 例如 当点击领取邮件按钮，EmailUI发送消息给EmailMediator传给PureMVC，（中间可能涉及服务器交互），之后PureMVC，需要更新背包内容就发送消息给BagMediator，BagMediator接收事件以后更新BagUI，Bag功能和Email功能并没有影响 代理模式（Proxy）在PureMVC中，Proxy帮助我们以更易于重用、修改对应用程序影响最小的方式暴露数据结构、接口给应用程序。Proxy可能只是简单的管理本地数据对象，以同步方式获取或修改数据；也可能是远程服务器数据，以异步方式操作数据，服务器数据返回之后以Notification方式告诉应用程序。 简单来说，Proxy对数据逻辑进行包装，只对外公布操作数据对象的API，例如EmailProxy负责接收来自服务器的邮件内容，当邮件更新时，EmailUI并不需要关心邮件数据是什么形式发来的，当EmailUI需要展示邮件内容，只需要调取EmailProxy公布的API（例如EmaliProxy.GetEmailList）即可，反之，当发送邮件时，EmailUI也不需要关注怎么发送，以什么样数据格式发给服务器，一切逻辑都由EmailProxy处理，这样极大程度实现了对一些处理逻辑的封装，降低了耦合。 命令模式（Command）命令模式是对命令的封装，把发出命令的责任和执行命令的责任分割开，委派给不同的对象。每一个命令都是一个操作：请求的一方发出请求要求执行一个操作；接收的一方收到请求，并执行操作。命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。 在PureMVC中，命令用来检索、操作Proxy，或者与Mediator通信，或者执行其它命令。 例如:EmailMediator 接收到来自UI的sendEmail的消息，EmailMediator把消息传到SendEmailCommand， SendEmailCommand持有EmailProxy的引用，调用EmailProxy的SendEmail接口发送消息 总体结构 实际应用框架入口123456789101112131415161718192021222324local GameFacade = BaseClass(&quot;GameFade&quot;, Facade)local base = Facadelocal STARTUP = &quot;startUp&quot;GameFacade.KEY = &quot;GameFacade&quot;function GameFacade:InitializeController() base.InitializeController(self) self:RegisterCommand(STARTUP, StartUpCommand)endfunction GameFacade:StartUp() self:SendNotification(STARTUP); --PureMVC初始化完成，注销STARTUP命令 self:RemoveCommand(STARTUP);endfunction GameFacade:GetInstance() if rawget(GameFacade, &quot;Instance&quot;) == nil then rawset(GameFacade, &quot;Instance&quot;, GameFacade.New(GameFacade.KEY)) end return GameFacade.Instanceendreturn GameFacade 1234567local StartUpCommand = BaseClass(&#x27;StartUpCommand&#x27;, MacroCommand)function StartUpCommand:InitializeMacroCommand() print(&quot;start&quot;)endreturn StartUpCommand 一般是继承Facade类注册 开始事件，这里是 STARTUP， 然后继承Command 构造 StartUpCommand这里可以参考网上一些完整样例。 1GameFacade:GetInstance():StartUp() 通过StartUp开启 单模块通信 红色为直接调用，绿色为事件通信 Proxy只发送消息不接受消息，是通过Command直接调用的，原因是设计时Proxy要负责和服务器交互，再监听其他事件过于繁琐 多模块通信 黄色线也是可能存在的事件，因为观察者模式不需要关注消息的来源，只要订阅了相关消息就可以触发 例如EmailProxy接收到服务器消息更新时也需要更新BagUI就可以发送消息给BagMediator 或者EmailUI也可以购买物品可以发送消息给EmailMediator转发给BagCommand调用BagProxy 过于强调解耦 因为都是消息机制，整个流程很长，而且Proxy中对数据进行操作后，发送Notification时，可能需要携带修改后的数据（可能是来自服务器的数据）。这个过程不仅通过次数多，而且带反馈数据的消息增加通信负担。另一方面要调试这个过程，我们只能在编译的时候找出一步一步的通信流程，才能跟踪调试。 修改因为游戏项目本身不需要过于解耦，UI部分不希望出现类爆炸的情况，在此基础上进行了一些修改 UI 和 Mediator 结合Mediator和UI之间的通信有点繁琐，可以让UI持有Mediator，这样UI可以通过持有的UIMediator 与PureMVC交互，并且接收到消息时，也可以直接调用自身UI函数，不再需要Mediator持有UI调用 1234567function UIMediator:ListNotificationInterests() if(self.mViewComponent ~= nil) then local result = self.mViewComponent:ListNotificationInterests() return result end return &#123;&#125;end 12345function UIMediator:HandleNotification(notification) if(self.mViewComponent ~= nil) then return self.mViewComponent:HandleNotification(notification) endend UI直接绑定一个公用的UIMediator通过UIMeditaor发送消息和PureMVC交互 Command中介多余数据相关部分已经被Proxy封装好，可以考虑不再需要通过Command转发，可以直接由UI（UIMediator）调用Proxy的接口以减少类的数量，Proxy之间的调用可以通过加一个全局注册事件触发 修改后 交互过程UI 通过调用自身的成员变量UIMediator发送消息并通过在UIMediator中注册的消息响应来自来自外部的消息UI不再经过Command调用Proxy 而是直接调用Proxy 修改总结 对于一个小功能，每个功能对应的文件应该为一个UI和一个Proxy 对于一个大功能，每个功能对应的文件应该为多个UI和一个Proxy 因为Proxy没有接收消息的接口，一般来说Proxy之间不会有互相调用的情况，但是可能会有如：背包收到服务器更新消息以后先更新背包后更新其他例如邮件等功能数据的情况，可考虑通过外部的Event添加监听思考 解耦的同时将使项目修改的复杂程度提高，某些解耦的办法还会增加代码量、降低执行效率。PureMVC是一个强解耦的框架，其效率本身不是很高，函数调用层次较深，而有时根本不清楚消息发到了哪里 因为需要外界触发，在游戏上一般只适合用来做UI部分","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://www.lidamo.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"Lua","slug":"技术/Lua","permalink":"http://www.lidamo.cn/categories/%E6%8A%80%E6%9C%AF/Lua/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://www.lidamo.cn/tags/%E6%A1%86%E6%9E%B6/"},{"name":"设计模式","slug":"设计模式","permalink":"http://www.lidamo.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-05-08T17:58:54.515Z","updated":"2021-05-10T11:05:43.814Z","comments":true,"path":"2021/05/09/hello-world/","link":"","permalink":"http://www.lidamo.cn/2021/05/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[{"name":"测试","slug":"测试","permalink":"http://www.lidamo.cn/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://www.lidamo.cn/tags/%E6%B5%8B%E8%AF%95/"}]}]}